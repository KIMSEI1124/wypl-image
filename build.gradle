plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.18.4'
    id 'jacoco'
}

group = 'com.wypl'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    /* AWS */
    implementation 'io.awspring.cloud:spring-cloud-starter-aws-secrets-manager-config:2.4.4'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    /* Lombok */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    /* Test */
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

/* Jacoco Start */
tasks.withType(JacocoReport) {
    reports {
        html.required = true
        xml.required = true
        html.outputLocation = file("reports/jacoco/index.xml")
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect { file ->
                fileTree(file) {
                    exclude(
                            "**/*Application*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/common/**",
                            "**/config/**",
                            "**/data/**",
                            "**/exception/**",
                            "**/properties/**",
                    )
                }
            })
    )
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.00.toBigDecimal()
            }

            excludes = [
                    "**/*Application*",
                    "**/*Request*",
                    "**/*Response*",
                    "**/common/**",
                    "**/config/**",
                    "**/data/**",
                    "**/exception/**",
                    "**/properties/**",
            ]
        }
    }
}
/* Jacoco End */

/* API Docs Start */
openapi3 {
    server = "http://127.0.0.1:8080"
    title = "What's Your Plan! Image Server API Docs"
    description = "What's Your Plan! Image Server API Description"
    version = "0.0.1"
    format = "yaml"
}

tasks.register('copyOasToSwagger', Copy) {
    dependsOn tasks.named("openapi3")

    delete file("src/main/resources/static/swagger-ui/openapi3.yaml")
    from("build/api-spec/openapi3.yaml")
    into("src/main/resources/static/swagger-ui/")
}

tasks.build {
    dependsOn tasks.named("copyOasToSwagger")
}
/* API Docs End */